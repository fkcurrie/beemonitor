# pre_build_script.py
# This script is executed by PlatformIO before the build process.
# It gathers version and build environment information and generates
# a C++ header file (include/version.h) with this data as macros.

import re
import subprocess
from pathlib import Path
from datetime import datetime
import os

# --- Configuration ---
CHANGELOG_PATH = Path("data/CHANGELOG.md")
OUTPUT_HEADER_PATH = Path("include/version.h")
DEFAULT_VERSION = "0.0.0"

# --- Helper Functions ---
def get_shell_output(command):
    """Executes a shell command and returns its output, stripped of whitespace."""
    try:
        result = subprocess.run(command, shell=True, check=True, stdout=subprocess.PIPE)
        return result.stdout.decode('utf-8').strip()
    except Exception as e:
        print(f"Error executing '{command}': {e}")
        return "unknown"

# --- Main Logic ---
# PlatformIO injects environment variables, we can get the board info from there
build_platform = os.environ.get('BOARD', 'unknown')
hw_platform = get_shell_output("uname -i")

version = DEFAULT_VERSION
build_host = get_shell_output("hostname")
build_os = get_shell_output("uname -a")
build_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")


try:
    # --- Read version from CHANGELOG.md ---
    if CHANGELOG_PATH.is_file():
        content = CHANGELOG_PATH.read_text()
        match = re.search(r"##\s*\[(\d+\.\d+\.\d+)\]", content)
        if match:
            version = match.group(1)
    else:
        print(f"Warning: {CHANGELOG_PATH} not found. Using default version.")

except Exception as e:
    print(f"Error reading version from {CHANGELOG_PATH}: {e}")

# --- Generate the C++ header file ---
header_content = f"""// This file is generated automatically by pre_build_script.py
// Do not edit this file manually.

#ifndef VERSION_H
#define VERSION_H

#define APP_VERSION "{version}"
#define BUILD_HOST "{build_host}"
#define BUILD_OS "{build_os}"
#define BUILD_PLATFORM "{build_platform}"
#define BUILD_HW_PLATFORM "{hw_platform}"
#define BUILD_DATE "{build_date}"

#endif // VERSION_H
"""

try:
    # --- Write the header file ---
    OUTPUT_HEADER_PATH.parent.mkdir(exist_ok=True)
    OUTPUT_HEADER_PATH.write_text(header_content)
    print(f"Generated {OUTPUT_HEADER_PATH} with the following details:")
    print(f"  - APP_VERSION: {version}")
    print(f"  - BUILD_HOST:  {build_host}")
    print(f"  - BUILD_OS:    {build_os}")
    print(f"  - BUILD_PLATFORM: {build_platform}")
    print(f"  - BUILD_HW_PLATFORM: {hw_platform}")
    print(f"  - BUILD_DATE:  {build_date}")

except Exception as e:
    print(f"Error writing to {OUTPUT_HEADER_PATH}: {e}")